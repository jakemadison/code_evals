__author__ = 'jmadison'

import fileinput
from itertools import islice, permutations


# taken straight up from the itertools docs:
def gen_selective_permutations(n):
    for i in permutations(range(1, n+1)):
        if i[0] == 2:
            raise StopIteration
        yield i





#
# def test_circular_equivalence(x, y):
#
#     # does x circ== y?
#
#     def sliding_window(a, n):
#         z = (islice(a, i, None) for i in range(n))
#         return list(zip(*z))
#
#     # x_prime = list(chain.from_iterable(repeat(x, 2)))  # double the list.
#     x_prime = x + x  # wow.  wtf was I smoking above.
#
#     for each_window in sliding_window(x_prime, len(x))[:-1]:
#         if each_window == y:
#             return True
#
#     else:
#         return False


def gen_circular_permutation_set(n):
    necklace_array = tuple(range(1, n+1))

    # instead of straight up permutations, maybe we can come up with some intelligent rules
    # eg: no even numbers can be next to one another.
    # if the first and last are even, that's also no good.

    necklace_prime_connected = [p for p in gen_selective_permutations(n) if test_prime_connections(p)]

    # final_set = []
    # for n in necklace_prime_connected:
    #     for f in final_set:
    #         if test_circular_equivalence(n, f):
    #             break
    #     else:
    #         final_set.append(n)

    return len(necklace_prime_connected)


def test_prime_connections(candidate):
    # constraints: 2 <= N <= 18, so max will be 17+18 = 35.
    # easier & faster than actually testing for primeness in a function here.

    primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31]

    for i, x in enumerate(candidate):
        try:
            if x + candidate[i+1] not in primes:
                return False
        except IndexError:
            if x + candidate[0] not in primes:
                return False
    #
    # for x, y in zip(candidate, candidate[1:]):
    #     if x + y not in primes:
    #         return False
    #
    # if candidate[0] + candidate[-1] not in primes:
    #     return False

    return True


def main():

    for line in fileinput.input(files='./testfile'):
    # for line in fileinput.input():
        line = line.strip()
        if not line:
            continue

        # using n, get our unique permutations of 1-n, with testing for circular equivalence being a requirement for
        # uniqueness.  Once you have those candidates, test to see how many of them fit the criteria of
        # "prime linking".  Spit out the number of passing candidates.

        n = int(line)

        if n % 2 != 0:  # only even numbers of n will work.  otherwise, two odds or two evens
                        # will end up next to each other on the necklace.
            print 0
            continue

        line = 12
        print gen_circular_permutation_set(int(line))
        break
        # print gen_circular_permutation_set(n)

    # print 'done'


if __name__ == '__main__':
    main()
    #
    # for ii in gen_selective_permutations(3):
    #     print ii

    # for ii, pp in enumerate(permutations(tuple(range(1, 4+1)), 4)):
    #     print ii+1, ('-'*5)+'>', pp
    #     if ii == 2:
    #         break



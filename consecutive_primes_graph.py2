__author__ = 'jmadison'

import fileinput
# from itertools import islice, permutations, chain, izip


def build_necklace_matrix(n):

    matrix = [[0 for x in range(n)] for x in range(n)]

    for i, e_x in enumerate(matrix):
        for ii, e_y in enumerate(matrix[i]):
            if ((i+1) + (ii+1)) in prime_set:
                matrix[ii][i] = 1  # 1 indicates that the two can be neighbours.

    # for row in matrix:
    #     print row

    return matrix


# @profile
def traverse_necklace_matrix(subsequent_iteration=True, current_point=1, previous_node=None, path=[]):

    # print 'traversing....cn {}, pn {}\t\t'.format(current_point, previous_node),
    path = path + [current_point]
    # curr_path_len += 1  # surprisingly SLOWER than len(path).
    # curr_path_len = len(path)

    if current_point == 1 and subsequent_iteration:
        if len(path) == target_len+1:
            trials.append(path)
        # print 'the end is the beginning! path trials: {}\n'.format(trials)
        return path

    # possible_moves = ([elem for elem in all_moves_dict[current_point]
    #                    if elem <= target_len and elem != previous_node and (elem == start or elem not in path)])

    # possible_moves = ([elem for elem in all_moves_dict[current_point]
    #                    if (elem == start or elem not in path) and elem <= target_len and elem != previous_node])

    # tiny speed up here, as conditional will often fail on elem == prev node first.
    possible_moves = ([elem for elem in all_moves_dict[current_point]
                       if elem != previous_node and (elem == 1 or elem not in path) and elem <= target_len])

# possible_moves = ([i+1 for i, e in enumerate(m[current_point-1])
#                    if e == 1 and i+1 != previous_node and i+1 < target_len+1 and (i+1 == start or i+1 not in path)])

    # print 'i am: {}, my friends are: {}, my path is: {}'.format(current_point, possible_moves, path)

    for each_move in possible_moves:
        traverse_necklace_matrix(current_point=each_move, previous_node=current_point,
                                 path=path)

    return path


def old_junk():
# def gen_circular_permutation_set(n):
#
#     # there must be only so many neighbours a number can have to be a prime under x??
#
#     # 1) define max_prime. n + n-1.  First prime less than that.
#     # for n= 6, max prime = 11.  Valid neighbours for:
#     # 1 -> 2, 4, 6
#     # 2 -> 1, 3, 5
#     # 3 -> 2, 4,
#     # 4 -> 1, 3,
#     # 5 -> 2, 6
#     # 6 -> 1, 5
#
#     # necklace_array = range(1, n+1)
#
#     # instead of straight up permutations, maybe we can come up with some intelligent rules
#     # eg: no even numbers can be next to one another.
#     # if the first and last are even, that's also no good.
#
#     # necklace_prime_connected = [p for p in gen_selective_permutations(n) if test_prime_connections(p)]
#
#     valid_perms = 0
#
#     # even_array = necklace_array[1::2]
#     # odd_array = necklace_array[::2]
#
#     odd_array = range(1, n+1, 2)
#     even_array = range(2, n+1, 2)
#
#     for odd_permutations in permutations(odd_array):
#
#         if odd_permutations[0] != odd_array[0]:
#             break
#
#         for even_permutations in permutations(even_array):
#             # interleave our permutations here....
#             # interleaved = [x for t in zip(odd_permutations, even_permutations) for x in t]
#             interleaved = list(chain.from_iterable(izip(odd_permutations, even_permutations)))  # slightly more perf.
#
#             print interleaved
#             if test_prime_connections(interleaved):
#                 valid_perms += 1
#
#     return valid_perms


# def test_prime_connections(candidate):
#
#     for i, x in enumerate(candidate):
#         try:
#             if x + candidate[i+1] not in prime_set:
#                 return False
#         except IndexError:
#             if x + candidate[0] not in prime_set:
#                 return False
#
#     return True


# def main():
#
#     for line in fileinput.input(files='./testfile'):
#     # for line in fileinput.input():
#         line = line.strip()
#         if not line:
#             continue
#
#         # using n, get our unique permutations of 1-n, with testing for circular equivalence being a requirement for
#         # uniqueness.  Once you have those candidates, test to see how many of them fit the criteria of
#         # "prime linking".  Spit out the number of passing candidates.
#
#         n = int(line)
#
#         if n % 2 != 0:  # only even numbers of n will work.  otherwise, two odds or two evens
#                         # will end up next to each other on the necklace.
#             print 0
#             continue
#
#         line = 6
#         print gen_circular_permutation_set(int(line))
#         break
#         # print gen_circular_permutation_set(n)
#
#     # print 'done'
    pass


def generate_all_moves_dict():
    # moves_dict = {}
    # for i, each_row in enumerate(m):
    #     moves_dict[i+1] = [ii+1 for ii, x in enumerate(each_row) if x == 1]
    #
    # this actually only happens once, so we don't really save that much with a nested list comp, dict comp. oh well.
    return {i+1: [ii+1 for ii, x in enumerate(each_row) if x == 1] for i, each_row in enumerate(m)}
    # return d


if __name__ == '__main__':
    # constraints: 2 <= N <= 18, so max will be 17+18 = 35.
    # easier & faster than actually testing for primeness in a function here.
    primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31]
    prime_set = set(primes)  # set lookup slightly more perf., but again, now it's only once.
    # main()
    # possible_moves_dict = {}
    # paths = []
    trials = []
    num = 4
    m = build_necklace_matrix(18)  # was 18
    all_moves_dict = generate_all_moves_dict()

    # for e in m:
    #     print e

    # for k, v in all_moves_dict.iteritems():
    #     print k, '->', v

    # import sys
    # sys.exit(0)

    for line in fileinput.input(files='./testfile'):
    # for line in fileinput.input():
        line = line.strip()
        if not line:
            continue

        n = int(line)

        n = 18
        print 'testing: {}'.format(n)

        if n % 2 != 0:  # only even numbers of n will work.  otherwise, two odds or two evens
                        # will end up next to each other on the necklace.
            print 0
            continue

        if n == 2:
            print 1  # this is a bit hacky... code above should test for len instead of start == end condition.. maybe.
            continue  # but for now because prev node and start node are the same for a set of 2... screw it.

        target_len = n
        traverse_necklace_matrix(subsequent_iteration=False)

        # print
        # for t in trials:
        #     print t
        print len(trials)
        # print 'final: n: {}, res: {}'.format(n, len(trials))
        trials = []
        break
